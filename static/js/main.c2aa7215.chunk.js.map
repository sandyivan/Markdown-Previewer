{"version":3,"sources":["App.js","defaultText.js","reportWebVitals.js","index.js"],"names":["App","props","inputChange","event","dirtyMarkdown","marked","target","value","sanitizeHtml","setState","editor","createMarkup","setOptions","breaks","__html","state","Container","className","Row","Col","icon","faFileCode","id","onChange","this","style","width","height","dangerouslySetInnerHTML","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2VA8FeA,E,kDA7Eb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAURC,YAAc,SAACC,GAEb,IAAIC,EAAgBC,IAAOF,EAAMG,OAAOC,OAGpBC,IAAaJ,GAGjC,EAAKK,SAAS,CACZC,OAAQP,EAAMG,OAAOC,SApBP,EA0BlBI,aAAe,WAMb,OALAN,IAAOO,WAAW,CAChBC,QAAQ,IAIH,CAACC,OADQT,IAAO,EAAKU,MAAML,UA7BhC,EAAKK,MAAQ,CACXL,OCpBO,w7BDiBK,E,0CAmClB,WAYE,OACE,eAACM,EAAA,EAAD,CAAWC,UAAU,qBAArB,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKF,UAAU,qBAAf,UACE,qBAAIA,UAAU,YAAd,UAA2B,cAAC,IAAD,CAAiBA,UAAU,QAAQG,KAAMC,MAApE,wBACA,mBAAGJ,UAAU,OAAb,uDAGJ,eAACC,EAAA,EAAD,CAAKD,UAAU,OAAf,UACE,eAACE,EAAA,EAAD,CAAKF,UAAU,oBAAf,UACE,oBAAIA,UAAU,cAAd,4BACA,0BAAUK,GAAG,SAASC,SAAUC,KAAKtB,YAAauB,MArBtC,CAClBC,MAAO,OACPC,OAAQ,QAmBoEpB,MAAOiB,KAAKT,MAAML,OAAxF,SACCc,KAAKT,MAAML,YAGd,eAACS,EAAA,EAAD,CAAMF,UAAU,YAAhB,UACE,oBAAIA,UAAU,wBAAd,qBACA,qBACEK,GAAG,UACHG,MAxBW,CACnBC,MAAO,OACPC,OAAQ,QAuBAV,UAAU,eACVW,wBAAyBJ,KAAKb,8B,GArE1BkB,IAAMC,WEJTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c2aa7215.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport sanitizeHtml from 'sanitize-html';\nimport marked from 'marked';\n\nimport defaultText from './defaultText';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileCode } from '@fortawesome/free-solid-svg-icons' \n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n      this.state = {\n        editor: defaultText,\n        //preview: marked(defaultText)\n      }\n  }\n\n\n\n\n  inputChange = (event) => {\n    //convert user input to markdown\n    let dirtyMarkdown = marked(event.target.value)\n\n    //sanitize the user input then injecting into our preview state\n    let cleanMarkdown = sanitizeHtml(dirtyMarkdown)  \n\n    //updating our state\n    this.setState({\n      editor: event.target.value,\n      //preview: cleanMarkdown\n    });\n    \n  }\n\n  createMarkup = () => {\n    marked.setOptions({\n      breaks: true\n    })\n    \n    let rawMarkup = marked(this.state.editor);\n    return {__html: rawMarkup};\n  }\n\n  render() {\n    \n    const inputStyles = {\n      width: '100%',\n      height: '80vh'\n    }\n\n    const outputStyles = {\n      width: '100%',\n      height: '80vh'\n    }\n\n    return(\n      <Container className=\"border border-info\">\n        <Row >\n          <Col className=\"bg-info text-white\">\n            <h1 className=\"pt-3 mb-0\" ><FontAwesomeIcon className=\"fa-sm\" icon={faFileCode} /> Mardown Previewer</h1>\n            <p className=\"pb-3\">Start typing to preview your markup!</p>\n          </Col>\n        </Row>\n        <Row className=\"mt-4\">\n          <Col className=\"bg-body text-dark\">\n            <h4 className=\"text-center\">Markdown input</h4>\n            <textarea id=\"editor\" onChange={this.inputChange} style={inputStyles} value={this.state.editor}>\n            {this.state.editor}\n            </textarea>\n          </Col>\n          <Col  className=\"text-dark\">\n            <h4 className=\"text-center text-dark\">Preview</h4>\n            <div \n              id=\"preview\" \n              style={outputStyles} \n              className=\"bg-light p-4\"\n              dangerouslySetInnerHTML={this.createMarkup()}\n            ></div>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","let defaultText =  `# Hi!\r\n\r\n## Welcome to my React previewer\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**\r\nOr _italic_.\r\nOr **_both!_**\r\nAnd  ~~cross stuff out~~ if you want to.\r\n\r\nThere's also [links](https://codepen.io/bmansk14/), and\r\n> Block Quotes\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![oranges](https://images.pexels.com/photos/4328961/pexels-photo-4328961.jpeg?cs=srgb&dl=aerial-view-of-cars-parked-on-parking-lot-4328961.jpg&fm=jpg)\r\n`\r\n\r\n\r\nexport default defaultText;\r\n\r\n/**\r\n `\r\n## This is some markdown\r\n### Consider making your own\r\n\r\n#### List items\r\n- George\r\n- Paul\r\n- Ringo\r\n- John\r\n\r\n#### Make it **bold** or make it *italic*\r\n\r\n#### Create links [Github](https://github.com/andydlindsay)\r\n\r\n`\r\n\r\n\r\n        =====\r\n\r\n\r\n\r\n\r\n        \r\n */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}